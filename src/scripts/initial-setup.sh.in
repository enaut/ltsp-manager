#!/bin/bash
# Contains some actions that the sysadmin should run after installation.
# Copyright (C) 2017 Alkis Georgopoulos <alkisg@gmail.com>
# License GNU GPL version 3 or newer <http://gnu.org/licenses/gpl.html>

# Initial-setup will automatically prompt to run again if it detects that it
# was last ran before the following version. MANUALLY UPDATE THIS:
PROMPT_AFTER="19.0"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
. ${DIR}/common.sh

main() {
    cmdline "$@"
    # configure_various goes first as it backgrounds a DNS task
    configure_various
    configure_teachers
}

cmdline() {
  local _dummy
  setupconf=/var/lib/ltsp-manager/initial-setup

  if [ "$1" = "--check" ]; then
      test -f "$setupconf" && . "$setupconf"
      printf "Last version=$last_version, current version=$version, rerun after version=$PROMPT_AFTER: "
      if [ "$(printf "%s\n%s\n" "$PROMPT_AFTER" "$last_version" | sort -V | tail -n 1)" = "$PROMPT_AFTER" ]; then
          printf "needs to be executed.\n"
          exit 1
      else
          printf "doesn't need to be executed.\n"
          exit 0
      fi
  fi

  if [ "$1" != "--no-prompt" ]; then
      printfn "`gettext "This will perform an initial setup to ensure that LTSP runs optimally."`"
      printf "%s " "`gettext "Press [Enter] to continue or Ctrl+C to abort:"`"
      read _dummy
  fi

  mkdir -p /var/lib/ltsp-manager
  printf "%s" \
  "# This file is regenerated when /usr/share/ltsp-manager/initial-setup.sh runs.

  # Remember the last version ran, to answer the --check parameter:
  last_version=$version
  ">"$setupconf"
}

configure_teachers() {
  local before after
  # Create "teachers" group and add the current user to epoptes and teachers groups
  test -f @sysconfdir@/default/ltsp-shared-folders && . @sysconfdir@/default/ltsp-shared-folders
  test -n "$TEACHERS" || return 0
  # If the group already exists, return
  getent group "$TEACHERS" >/dev/null && return 0
  # 685 = bash -c 'echo $((512 + 16#$(printf teachers | md5sum | cut -c1-2)))'
  addgroup --system --gid 685 "$TEACHERS"

  detect_administrator
  test -n "$_ADMINISTRATOR" || return 0
  before=$(groups "$_ADMINISTRATOR")
  usermod -a -G "$TEACHERS,epoptes" "$_ADMINISTRATOR"
  after=$(groups "$_ADMINISTRATOR")
  if [ "$before" != "$after" ]; then
    bold "`gettext "You will need to logout in order for the group changes to take effect!"`"
  fi

  # If the group already exists, don't do anything
  if ! getent group "$TEACHERS" >/dev/null; then
      addgroup --system "$TEACHERS"
      user=$(id -un)
      if [ "$user" = "root" ]; then
          # Try to find the user that ran sudo or su
          user=$(loginctl user-status | awk '{ print $1; exit 0 }')
      fi
      if [ -n "$user" ] && [ "$user" != "root" ]; then
          gpasswd -a "$user" "$TEACHERS"
          gpasswd -a "$user" epoptes
          bold "`gettext "You will need to logout in order for the group changes to take effect!"`"
      fi
  fi
}

configure_various() {
  # Ensure that "server" is resolvable by DNS.
  if ! getent hosts server >/dev/null; then
    search_and_replace "^127.0.0.1[[:space:]]*localhost$" "& server" \
      /etc/hosts || true
  fi & # Background it in case the DNS resolve takes a long time.

  # Allow more simultaneous SSH connections from the local network.
  search_and_replace "^#MaxStartups 10:30:100$" "MaxStartups 20:30:100" \
    /etc/ssh/sshd_config true

  # Don't prompt for new LTS releases until we're ready for them.
  # Note that we can't use search_and_replace here (LP: #1504893).
  sed 's/^Prompt=.*/Prompt=never/' -i /etc/update-manager/release-upgrades

  # Enable printer sharing, only if the user hasn't modified cups settings.
  # `cupsctl _share_printers=1` strips comments, but that's what the
  # system-config-printer does as well, and it takes care of restarting cups.
  if cmp --quiet /usr/share/cups/cupsd.conf.default /etc/cups/cupsd.conf; then
    cupsctl _share_printers=1
  fi
}

main "$@"
